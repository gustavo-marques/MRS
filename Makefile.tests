# Include local configs if present
-include config.mk

CONFIGS ?= MOM6-examples
BUILD = build
COMPILERS ?= gnu intel pgi
SHELL = bash
MINUS_S = -s
MINUS_J = -j

TAR_FILES = $(foreach c,$(COMPILERS),symmetric_$(c).tar.gz non_symmetric_$(c).tar.gz) static_gnu.tar.gz
SYM_TAR_FILES = $(foreach c,$(COMPILERS),symmetric_$(c).tar.gz)
NON_SYM_TAR_FILES = $(foreach c,$(COMPILERS),non_symmetric_$(c).tar.gz) static_gnu.tar.gz
#TAR_FILES = $(foreach c,$(COMPILERS),symmetric_$(c).tar.gz non_symmetric_$(c).tar.gz) static_gnu.tar.gz
TAR_FILES = $(SYM_TAR_FILES) $(NON_SYM_TAR_FILES) restart_results_gnu.tar.gz

all:
	make -f MRS/Makefile.tests $(SYM_TAR_FILES)
	make -f MRS/Makefile.tests $(NON_SYM_TAR_FILES)
	make -f MRS/Makefile.tests restart_results_gnu.tar.gz
gnu: non_symmetric_gnu.tar.gz symmetric_gnu.tar.gz static_gnu.tar.gz
intel: non_symmetric_intel.tar.gz symmetric_intel.tar.gz
pgi: non_symmetric_pgi.tar.gz symmetric_pgi.tar.gz

manifest.mk:
	bash MRS/generate_manifest.sh $(CONFIGS) > manifest.mk

# Runs model and tars up regression files
# 1 - prefix, 2 - compiler, 3 - make args
define collect-regressions
$(1)_$(2).tar.gz: manifest.mk
	make -f MRS/Makefile.tests clean_$(2) $(MINUS_S)
	@echo -n '$(1) $2 starting at ' && date
	-time make -f MRS/Makefile.run $(3) $(MINUS_S) $(MINUS_J)
	time make -f MRS/Makefile.run $(3) $(MINUS_S) $(MINUS_J)
	@echo -n '$(1) $2 finished at ' && date
	cd $(CONFIGS) && tar zcf ../$$@ `find [oilc]*/ -name ocean.stats.$(2)`
	cd $(CONFIGS) && tar zcf ../params_$$@ `find [oilc]*/ -name "*_parameter_doc.*" -o -name "*available_diags*"`
endef
$(foreach c,$(COMPILERS),$(eval $(call collect-regressions,non_symmetric,$(c),$(c)_all)))
$(foreach c,$(COMPILERS),$(eval $(call collect-regressions,symmetric,$(c),$(c)_all MEMORY=dynamic_symmetric)))
$(foreach c,$(COMPILERS),$(eval $(call collect-regressions,static,$(c),$c_static_ocean_only MEMORY=static)))

clean_%:
	find $(CONFIGS)/[oilc]*/ -name ocean.stats.$* | xargs -r rm
clean:
	rm -rf $(TAR_FILES) $(foreach c,$(COMPILERS),_$(c) $(c).md5)

# Unpacks regressions from tar file and checks status
# 1 - compiler, 2 - tar file prefix
define check-regressions
$(1)_$(2): $(1).md5
	@mkdir -p _$(1)
	cd _$(1) ; tar zxf ../$(2)_$(1).tar.gz
	cd _$(1) ; md5sum -c ../$(1).md5
endef
$(foreach c,$(COMPILERS),$(eval $(call check-regressions,$(c),symmetric)))
$(foreach c,$(COMPILERS),$(eval $(call check-regressions,$(c),non_symmetric)))

# Unpacks static regressions from tar file and checks status
# 1 - compiler, 2 - tar file prefix
define check-static-regressions
$(1)_$(2): $(1).md5
	@mkdir -p _$(1)
	cd _$(1) ; tar zxf ../symmetric_$(1).tar.gz
	cd _$(1) ; tar zxf ../$(2)_$(1).tar.gz
	cd _$(1) ; md5sum -c ../$(1).md5
endef
$(foreach c,$(COMPILERS),$(eval $(call check-static-regressions,$(c),static)))

# Unpacks non-symmetric regressions and compares to symmetric regressions
# 1 - compiler
define check-layout-reproducibility
$(1)_layout:
	@mkdir -p _$(1)
	cd _$(1) ; tar zxf ../symmetric_$(1).tar.gz
	cd _$(1) ; md5sum `find [oilc]* -name ocean.stats.$(1)` > $(1).md5
	cd _$(1) ; tar zxf ../non_symmetric_$(1).tar.gz
	cd _$(1) ; md5sum -c $(1).md5
endef
$(foreach c,$(COMPILERS),$(eval $(call check-layout-reproducibility,$(c))))

%.md5:
	(cd regressions ; md5sum `find [oilc]* -name ocean.stats.$*`) > $@

# Runs restart tests
# 1 - compiler
define run-restart-tests
$(1)_run_restart:
	time make -f MRS/Makefile.restart $(1)_ocean_only $(MINUS_S) $(MINUS_J) RESTART_STAGE=01
	time make -f MRS/Makefile.restart $(1)_ice_ocean_SIS2 $(MINUS_S) $(MINUS_J) RESTART_STAGE=01
	time make -f MRS/Makefile.restart $(1)_ocean_only $(MINUS_S) $(MINUS_J) RESTART_STAGE=02
	time make -f MRS/Makefile.restart $(1)_ice_ocean_SIS2 $(MINUS_S) $(MINUS_J) RESTART_STAGE=02
	time make -f MRS/Makefile.restart $(1)_ocean_only $(MINUS_S) $(MINUS_J) RESTART_STAGE=12
	time make -f MRS/Makefile.restart $(1)_ice_ocean_SIS2 $(MINUS_S) $(MINUS_J) RESTART_STAGE=12
restart_results_$(1).tar.gz: $(1)_run_restart
	cd $(CONFIGS) && tar zcf ../$$@ `find [oilc]*/ -path "*/??.ignore/*" -name ocean.stats.$(1)`
endef
$(foreach c,$(COMPILERS),$(eval $(call run-restart-tests,$(c))))

# Tests restart output
# 1 - compiler
define test-restarts
$(1)_check_restarts:
	cd $(CONFIGS) ; tar zxf ../restart_results_$(1).tar.gz
	make -f MRS/Makefile.restart restart_$(1)_ocean_only restart_$(1)_ice_ocean_SIS2 $(MINUS_S) -k
endef
$(foreach c,$(COMPILERS),$(eval $(call test-restarts,$(c))))

# Unpacks parameters from tar file and checks status
# 1 - compiler, 2 - tar file prefix
define check-params
params_$(1)_$(2): $(1).md5
	cd $(CONFIGS) ; tar zxf ../params_$(2)_$(1).tar.gz
	cd $(CONFIGS) ; git diff --exit-code [a-rt-z]*
endef
$(foreach c,$(COMPILERS),$(eval $(call check-params,$(c),symmetric)))
